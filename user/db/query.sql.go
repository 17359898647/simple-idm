// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email)
VALUES ($1)
RETURNING uuid, created_at, last_modified_at, deleted_at, created_by, email, name
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const findUsers = `-- name: FindUsers :many
SELECT uuid, created_at, last_modified_at, deleted_at, created_by, email
FROM users
limit 20
`

type FindUsersRow struct {
	Uuid           uuid.UUID        `json:"uuid"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	LastModifiedAt pgtype.Timestamp `json:"last_modified_at"`
	DeletedAt      pgtype.Timestamp `json:"deleted_at"`
	CreatedBy      pgtype.Text      `json:"created_by"`
	Email          string           `json:"email"`
}

func (q *Queries) FindUsers(ctx context.Context) ([]FindUsersRow, error) {
	rows, err := q.db.Query(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersRow
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET email = $2 WHERE uuid = $1
RETURNING uuid, created_at, last_modified_at, deleted_at, created_by, email, name
`

type UpdateUserParams struct {
	Uuid  uuid.UUID `json:"uuid"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Uuid, arg.Email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
	)
	return i, err
}
