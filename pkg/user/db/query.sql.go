// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, name)
VALUES ($1, $2, $3)
RETURNING uuid, created_at, last_modified_at, deleted_at, created_by, email, name, password, verified_at, username
`

type CreateUserParams struct {
	Email    string         `json:"email"`
	Username sql.NullString `json:"username"`
	Name     sql.NullString `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Username, arg.Name)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.VerifiedAt,
		&i.Username,
	)
	return i, err
}

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles (user_uuid, role_uuid)
VALUES ($1, $2)
RETURNING user_uuid, role_uuid
`

type CreateUserRoleParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
	RoleUuid uuid.UUID `json:"role_uuid"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole, arg.UserUuid, arg.RoleUuid)
	var i UserRole
	err := row.Scan(&i.UserUuid, &i.RoleUuid)
	return i, err
}

type CreateUserRoleBatchParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
	RoleUuid uuid.UUID `json:"role_uuid"`
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE uuid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, argUuid)
	return err
}

const deleteUserRoles = `-- name: DeleteUserRoles :exec
DELETE FROM user_roles
WHERE user_uuid = $1
`

func (q *Queries) DeleteUserRoles(ctx context.Context, userUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserRoles, userUuid)
	return err
}

const findUsers = `-- name: FindUsers :many
SELECT uuid, created_at, last_modified_at, deleted_at, created_by, email, name
FROM users
limit 20
`

type FindUsersRow struct {
	Uuid           uuid.UUID      `json:"uuid"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
}

func (q *Queries) FindUsers(ctx context.Context) ([]FindUsersRow, error) {
	rows, err := q.db.Query(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersRow
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.Email,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsersWithRoles = `-- name: FindUsersWithRoles :many
SELECT u.uuid, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name,
       json_agg(json_build_object(
           'uuid', r.uuid,
           'name', r.name
       )) as roles
FROM users u
LEFT JOIN user_roles ur ON u.uuid = ur.user_uuid
LEFT JOIN roles r ON ur.role_uuid = r.uuid
GROUP BY u.uuid, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name
LIMIT 20
`

type FindUsersWithRolesRow struct {
	Uuid           uuid.UUID      `json:"uuid"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Roles          []byte         `json:"roles"`
}

func (q *Queries) FindUsersWithRoles(ctx context.Context) ([]FindUsersWithRolesRow, error) {
	rows, err := q.db.Query(ctx, findUsersWithRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersWithRolesRow
	for rows.Next() {
		var i FindUsersWithRolesRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.Email,
			&i.Name,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserUUID = `-- name: GetUserUUID :one
SELECT uuid, created_at, last_modified_at, deleted_at, created_by, email, name
FROM users
WHERE uuid = $1
`

type GetUserUUIDRow struct {
	Uuid           uuid.UUID      `json:"uuid"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
}

func (q *Queries) GetUserUUID(ctx context.Context, argUuid uuid.UUID) (GetUserUUIDRow, error) {
	row := q.db.QueryRow(ctx, getUserUUID, argUuid)
	var i GetUserUUIDRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const getUserWithRoles = `-- name: GetUserWithRoles :one
SELECT u.uuid, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name,
       json_agg(json_build_object(
           'uuid', r.uuid,
           'name', r.name
       )) as roles
FROM users u
LEFT JOIN user_roles ur ON u.uuid = ur.user_uuid
LEFT JOIN roles r ON ur.role_uuid = r.uuid
WHERE u.uuid = $1
GROUP BY u.uuid, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name
`

type GetUserWithRolesRow struct {
	Uuid           uuid.UUID      `json:"uuid"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Roles          []byte         `json:"roles"`
}

func (q *Queries) GetUserWithRoles(ctx context.Context, argUuid uuid.UUID) (GetUserWithRolesRow, error) {
	row := q.db.QueryRow(ctx, getUserWithRoles, argUuid)
	var i GetUserWithRolesRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
		&i.Roles,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $2 WHERE uuid = $1
RETURNING uuid, created_at, last_modified_at, deleted_at, created_by, email, name, password, verified_at, username
`

type UpdateUserParams struct {
	Uuid uuid.UUID      `json:"uuid"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Uuid, arg.Name)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.VerifiedAt,
		&i.Username,
	)
	return i, err
}
