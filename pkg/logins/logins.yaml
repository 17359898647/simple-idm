openapi: 3.0.0
info:
  title: Logins Management API
  version: 1.0.0
paths:
  /:
    get:
      summary: List all logins
      parameters:
        - name: limit
          in: query
          description: Maximum number of logins to return
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Offset for pagination
          required: false
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          description: Search term for filtering logins
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of logins
          content:
            application/json:
              schema:
                type: object
                properties:
                  logins:
                    type: array
                    items:
                      $ref: "#/components/schemas/Login"
                  total:
                    type: integer
                    description: Total number of logins
    post:
      summary: Create a new login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLoginRequest"
      responses:
        "201":
          description: Login created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already exists"
  
  /{id}:
    get:
      summary: Get login by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Login details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "404":
          description: Login not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login not found"
    put:
      summary: Update login
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLoginRequest"
      responses:
        "200":
          description: Login updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "404":
          description: Login not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login not found"
    delete:
      summary: Delete login
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Login deleted successfully
        "404":
          description: Login not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login not found"
  
  /{id}/password:
    put:
      summary: Update login password
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "404":
          description: Login not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login not found"

components:
  schemas:
    Login:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        two_factor_enabled:
          type: boolean
        password_version:
          type: integer
    
    CreateLoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    
    UpdateLoginRequest:
      type: object
      properties:
        username:
          type: string
      required:
        - username
    
    UpdatePasswordRequest:
      type: object
      properties:
        password:
          type: string
      required:
        - password
    
    EnableTwoFactorRequest:
      type: object
      properties:
        secret:
          type: string
        verification_code:
          type: string
      required:
        - secret
        - verification_code
