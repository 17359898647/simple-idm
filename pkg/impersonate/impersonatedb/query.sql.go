// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package impersonatedb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const findUserRolesByUserUuid = `-- name: FindUserRolesByUserUuid :many
SELECT name
FROM user_roles ur
LEFT JOIN roles ON ur.role_uuid = roles.uuid
WHERE ur.user_uuid = $1
`

func (q *Queries) FindUserRolesByUserUuid(ctx context.Context, userUuid uuid.UUID) ([]sql.NullString, error) {
	rows, err := q.db.Query(ctx, findUserRolesByUserUuid, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var name sql.NullString
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUuid = `-- name: GetUserByUuid :one
SELECT uuid, created_at, last_modified_at, deleted_at, created_by, email, name
FROM users
WHERE uuid = $1
`

type GetUserByUuidRow struct {
	Uuid           uuid.UUID      `json:"uuid"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
}

func (q *Queries) GetUserByUuid(ctx context.Context, argUuid uuid.UUID) (GetUserByUuidRow, error) {
	row := q.db.QueryRow(ctx, getUserByUuid, argUuid)
	var i GetUserByUuidRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
	)
	return i, err
}
