// Package login provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package login

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// EmailVerifyRequest defines model for EmailVerifyRequest.
type EmailVerifyRequest struct {
	Email string `json:"email"`
}

// FindUsernameRequest defines model for FindUsernameRequest.
type FindUsernameRequest struct {
	// Email address to find username for
	Email openapi_types.Email `json:"email"`
}

// Login defines model for Login.
type Login struct {
	// Token for 2FA verification if required
	LoginToken *string `json:"loginToken,omitempty"`
	Message    string  `json:"message"`

	// Whether 2FA verification is required
	Requires2fA *bool  `json:"requires2FA,omitempty"`
	Status      string `json:"status"`
	User        User   `json:"user"`
}

// PasswordReset defines model for PasswordReset.
type PasswordReset struct {
	Code     string `json:"code"`
	Password string `json:"password"`
}

// PasswordResetInit defines model for PasswordResetInit.
type PasswordResetInit struct {
	// Username of the account to reset password for
	Username string `json:"username"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// Tokens defines model for Tokens.
type Tokens struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

// TwoFactorDisable defines model for TwoFactorDisable.
type TwoFactorDisable struct {
	// Current TOTP code
	Code string `json:"code"`

	// Current account password
	CurrentPassword string `json:"currentPassword"`
}

// TwoFactorEnable defines model for TwoFactorEnable.
type TwoFactorEnable struct {
	// Current TOTP code
	Code string `json:"code"`

	// TOTP secret from setup
	Secret string `json:"secret"`
}

// TwoFactorSetup defines model for TwoFactorSetup.
type TwoFactorSetup struct {
	// otpauth:// URL for manual setup
	OtpauthURL *string `json:"otpauthUrl,omitempty"`

	// Data URI of QR code image
	QrCode *string `json:"qrCode,omitempty"`

	// TOTP secret key
	Secret *string `json:"secret,omitempty"`
}

// TwoFactorVerify defines model for TwoFactorVerify.
type TwoFactorVerify struct {
	// TOTP code
	Code string `json:"code"`

	// Token from initial login response
	LoginToken string `json:"loginToken"`
}

// User defines model for User.
type User struct {
	Email string `json:"email"`
	Name  string `json:"name"`

	// Whether 2FA is enabled for this user
	TwoFactorEnabled bool   `json:"twoFactorEnabled"`
	UUID             string `json:"uuid"`
}

// Post2faDisableJSONBody defines parameters for Post2faDisable.
type Post2faDisableJSONBody TwoFactorDisable

// Post2faEnableJSONBody defines parameters for Post2faEnable.
type Post2faEnableJSONBody TwoFactorEnable

// Post2faVerifyJSONBody defines parameters for Post2faVerify.
type Post2faVerifyJSONBody TwoFactorVerify

// PostEmailVerifyJSONBody defines parameters for PostEmailVerify.
type PostEmailVerifyJSONBody EmailVerifyRequest

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostMobileLoginJSONBody defines parameters for PostMobileLogin.
type PostMobileLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostPasswordResetJSONBody defines parameters for PostPasswordReset.
type PostPasswordResetJSONBody PasswordReset

// PostPasswordResetInitJSONBody defines parameters for PostPasswordResetInit.
type PostPasswordResetInitJSONBody PasswordResetInit

// PostRegisterJSONBody defines parameters for PostRegister.
type PostRegisterJSONBody RegisterRequest

// PostUsernameFindJSONBody defines parameters for PostUsernameFind.
type PostUsernameFindJSONBody FindUsernameRequest

// Post2faDisableJSONRequestBody defines body for Post2faDisable for application/json ContentType.
type Post2faDisableJSONRequestBody Post2faDisableJSONBody

// Bind implements render.Binder.
func (Post2faDisableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faEnableJSONRequestBody defines body for Post2faEnable for application/json ContentType.
type Post2faEnableJSONRequestBody Post2faEnableJSONBody

// Bind implements render.Binder.
func (Post2faEnableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faVerifyJSONRequestBody defines body for Post2faVerify for application/json ContentType.
type Post2faVerifyJSONRequestBody Post2faVerifyJSONBody

// Bind implements render.Binder.
func (Post2faVerifyJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostEmailVerifyJSONRequestBody defines body for PostEmailVerify for application/json ContentType.
type PostEmailVerifyJSONRequestBody PostEmailVerifyJSONBody

// Bind implements render.Binder.
func (PostEmailVerifyJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// Bind implements render.Binder.
func (PostLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostMobileLoginJSONRequestBody defines body for PostMobileLogin for application/json ContentType.
type PostMobileLoginJSONRequestBody PostMobileLoginJSONBody

// Bind implements render.Binder.
func (PostMobileLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostPasswordResetJSONRequestBody defines body for PostPasswordReset for application/json ContentType.
type PostPasswordResetJSONRequestBody PostPasswordResetJSONBody

// Bind implements render.Binder.
func (PostPasswordResetJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostPasswordResetInitJSONRequestBody defines body for PostPasswordResetInit for application/json ContentType.
type PostPasswordResetInitJSONRequestBody PostPasswordResetInitJSONBody

// Bind implements render.Binder.
func (PostPasswordResetInitJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody PostRegisterJSONBody

// Bind implements render.Binder.
func (PostRegisterJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostUsernameFindJSONRequestBody defines body for PostUsernameFind for application/json ContentType.
type PostUsernameFindJSONRequestBody PostUsernameFindJSONBody

// Bind implements render.Binder.
func (PostUsernameFindJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// Post2faDisableJSON200Response is a constructor method for a Post2faDisable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faDisableJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faEnableJSON200Response is a constructor method for a Post2faEnable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faEnableJSON200Response(body struct {
	// One-time use backup codes
	BackupCodes []string `json:"backupCodes,omitempty"`
	Message     *string  `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faSetupJSON200Response is a constructor method for a Post2faSetup response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faSetupJSON200Response(body TwoFactorSetup) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faVerifyJSON200Response is a constructor method for a Post2faVerify response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faVerifyJSON200Response(body Login) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostEmailVerifyJSON200Response is a constructor method for a PostEmailVerify response.
// A *Response is returned with the configured status code and content type from the spec.
func PostEmailVerifyJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostLoginJSON200Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON200Response(body Login) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostLoginJSON400Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON400Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostLogoutJSON200Response is a constructor method for a PostLogout response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLogoutJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostMobileLoginJSON200Response is a constructor method for a PostMobileLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobileLoginJSON200Response(body struct {
	// JWT access token
	AccessToken string `json:"accessToken"`

	// JWT refresh token
	RefreshToken string `json:"refreshToken"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostPasswordResetJSON200Response is a constructor method for a PostPasswordReset response.
// A *Response is returned with the configured status code and content type from the spec.
func PostPasswordResetJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostPasswordResetInitJSON200Response is a constructor method for a PostPasswordResetInit response.
// A *Response is returned with the configured status code and content type from the spec.
func PostPasswordResetInitJSON200Response(body struct {
	Code *string `json:"code,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostRegisterJSON201Response is a constructor method for a PostRegister response.
// A *Response is returned with the configured status code and content type from the spec.
func PostRegisterJSON201Response(body struct {
	Email *openapi_types.Email `json:"email,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostTokenRefreshJSON200Response is a constructor method for a PostTokenRefresh response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTokenRefreshJSON200Response(body Tokens) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUsernameFindJSON200Response is a constructor method for a PostUsernameFind response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUsernameFindJSON200Response(body struct {
	// A message indicating the request was processed
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Disable 2FA for the user
	// (POST /2fa/disable)
	Post2faDisable(w http.ResponseWriter, r *http.Request) *Response
	// Enable 2FA for the user
	// (POST /2fa/enable)
	Post2faEnable(w http.ResponseWriter, r *http.Request) *Response
	// Generate 2FA secret and QR code
	// (POST /2fa/setup)
	Post2faSetup(w http.ResponseWriter, r *http.Request) *Response
	// Verify 2FA code during login
	// (POST /2fa/verify)
	Post2faVerify(w http.ResponseWriter, r *http.Request) *Response
	// Verify email address
	// (POST /email/verify)
	PostEmailVerify(w http.ResponseWriter, r *http.Request) *Response
	// Login a user
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request) *Response
	// Logout user
	// (POST /logout)
	PostLogout(w http.ResponseWriter, r *http.Request) *Response
	// Mobile login endpoint
	// (POST /mobile/login)
	PostMobileLogin(w http.ResponseWriter, r *http.Request) *Response
	// Reset password
	// (POST /password/reset)
	PostPasswordReset(w http.ResponseWriter, r *http.Request) *Response
	// Initiate password reset using username
	// (POST /password/reset/init)
	PostPasswordResetInit(w http.ResponseWriter, r *http.Request) *Response
	// Register a new user
	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request) *Response
	// Refresh JWT tokens
	// (POST /token/refresh)
	PostTokenRefresh(w http.ResponseWriter, r *http.Request) *Response
	// Send username to user's email address
	// (POST /username/find)
	PostUsernameFind(w http.ResponseWriter, r *http.Request) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Post2faDisable operation middleware
func (siw *ServerInterfaceWrapper) Post2faDisable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faDisable(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faEnable operation middleware
func (siw *ServerInterfaceWrapper) Post2faEnable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faEnable(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faSetup operation middleware
func (siw *ServerInterfaceWrapper) Post2faSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faSetup(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faVerify operation middleware
func (siw *ServerInterfaceWrapper) Post2faVerify(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faVerify(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostEmailVerify operation middleware
func (siw *ServerInterfaceWrapper) PostEmailVerify(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostEmailVerify(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostLogout(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostMobileLogin operation middleware
func (siw *ServerInterfaceWrapper) PostMobileLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostMobileLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) PostPasswordReset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostPasswordReset(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostPasswordResetInit operation middleware
func (siw *ServerInterfaceWrapper) PostPasswordResetInit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostPasswordResetInit(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostRegister(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostTokenRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostTokenRefresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostTokenRefresh(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostUsernameFind operation middleware
func (siw *ServerInterfaceWrapper) PostUsernameFind(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostUsernameFind(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Post("/2fa/disable", wrapper.Post2faDisable)
		r.Post("/2fa/enable", wrapper.Post2faEnable)
		r.Post("/2fa/setup", wrapper.Post2faSetup)
		r.Post("/2fa/verify", wrapper.Post2faVerify)
		r.Post("/email/verify", wrapper.PostEmailVerify)
		r.Post("/login", wrapper.PostLogin)
		r.Post("/logout", wrapper.PostLogout)
		r.Post("/mobile/login", wrapper.PostMobileLogin)
		r.Post("/password/reset", wrapper.PostPasswordReset)
		r.Post("/password/reset/init", wrapper.PostPasswordResetInit)
		r.Post("/register", wrapper.PostRegister)
		r.Post("/token/refresh", wrapper.PostTokenRefresh)
		r.Post("/username/find", wrapper.PostUsernameFind)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
