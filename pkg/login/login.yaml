openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
paths:
  /login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                code:
                  x-go-optional-value: true
                  type: string
                  description: 2FA verification code if enabled
              required:
                - username
                - password
      responses:
        "200":
          description: User login successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "202":
          description: Login successful but further action required (2FA or user selection)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TwoFactorRequiredResponse"
                  - $ref: "#/components/schemas/SelectUserRequiredResponse"

        "400":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username/Password is wrong"
  /password/reset/init:
    post:
      summary: Initiate password reset using username
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetInit"
      responses:
        "200":
          description: Password reset initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
  /password/reset:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /logout:
    post:
      summary: Logout user
      responses:
        "200":
          description: Logout successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
  /email/verify:
    post:
      summary: Verify email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerifyRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /token/refresh:
    post:
      summary: Refresh JWT tokens
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
  /mobile/login:
    post:
      summary: Mobile login endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: Mobile login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT access token
                  refreshToken:
                    type: string
                    description: JWT refresh token
                required:
                  - accessToken
                  - refreshToken
  /username/find:
    post:
      summary: Send username to user's email address
      description: If an account exists with the provided email, the username will be sent to that email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindUsernameRequest"
      responses:
        "200":
          description: Request processed successfully. If an account exists, an email with the username will be sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating the request was processed
                    example: "If an account exists with that email, we will send the username to it."
  /user/switch:
    post:
      summary: Switch to a different user when multiple users are available for the same login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ID of the user to switch to
              required:
                - user_id
      responses:
        "200":
          description: Successfully switched to the specified user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "400":
          description: Invalid request or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid user UUID or user not found"
        "403":
          description: Not authorized to switch to this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not authorized to switch to this user"

  /2fa/verify:
    post:
      summary: Verify 2FA code during login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorVerify"
      responses:
        "200":
          description: 2FA code verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
components:
  schemas:
    TwoFactorRequiredResponse:
      x-go-optional-value: true
      type: object
      properties:
        status:
          type: string
          example: "2fa_required"
        message:
          type: string
          example: "2FA verification required"
        temp_token:
          type: string
          description: Temporary token to use for 2FA verification
        two_factor_methods:
          type: array
          items:
            $ref: "#/components/schemas/TwoFactorMethod"
    TwoFactorMethod:
      x-go-optional-value: true
      type: object
      properties:
        type:
          type: string
        delivery_options:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryOption"
    DeliveryOption:
      x-go-optional-value: true
      type: object
      properties:
        hashed_value:
          type: string
        display_value:
          type: string
    SelectUserRequiredResponse:
      x-go-optional-value: true
      type: object
      properties:
        status:
          type: string
          example: "select_user_required"
        message:
          type: string
          example: "Select user required"
        temp_token:
          type: string
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: string
          description: User's unique identifier
        display_name:
          type: string
          description: User's display name
        custom_claims:
          type: object
          description: Additional user information
          properties:
            email:
              type: string
              format: email
            username:
              type: string
            roles:
              type: array
              items:
                type: string
    Login:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Login successful"
        users:
          type: array
          description: List of users associated with the login. Usually contains one user, but may contain multiple if same username is shared.
          items:
            $ref: "#/components/schemas/User"
        status:
          type: string
          example: success
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"
        requires2FA:
          type: boolean
          description: Whether 2FA verification is required
        loginToken:
          type: string
          description: Token for 2FA verification if required
      required:
        - status
        - message
        - user
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        twoFactorEnabled:
          type: boolean
          description: Whether 2FA is enabled for this user
      required:
        - id
        - name
        - email
        - twoFactorEnabled
    PasswordReset:
      type: object
      properties:
        code:
          type: string
        password:
          type: string
      required:
        - code
        - password
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
      required:
        - name
        - email
        - password
    EmailVerifyRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    PasswordResetInit:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          description: Username of the account to reset password for
    Tokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken
    FindUsernameRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address to find username for
    TwoFactorVerify:
      type: object
      required:
        - code
        - loginToken
      properties:
        code:
          type: string
          description: TOTP code
        loginToken:
          type: string
          description: Token from initial login response
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
