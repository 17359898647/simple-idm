openapi: 3.0.0
info:
  title: Impersonate Management API
  version: 1.0.0
paths:
  /send:
    post:
      summary: Initiate sending 2fa code
      operationId: post_2fa_send
      requestBody:
        x-go-optional-value: true
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                twofa_type:
                  type: string
                delivery_option:
                  type: string
              required:
                - twofa_type
                - delivery_option
      responses:
        "200":
          description: 2fa initiated Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /validate:
    post:
      summary: Authenticate 2fa passcode
      operationId: post_2fa_validate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                twofa_type:
                  type: string
                passcode:
                  type: string
              required:
                - passcode
                - twofa_type
      responses:
        "200":
          description: 2fa validated Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "202":
          description: 2FA successful but select user required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelectUserRequiredResponse"
  /{login_id}/2fa/enabled:
    get:
      summary: Get all enabled 2fas
      operationId: get_2fa_enabled
      parameters:
        - name: login_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved enabled 2FA methods
          content:
            application/json:
              schema:
                type: object
                properties:
                  2fa_methods:
                    type: array
                    items:
                      type: string
components:
  schemas:
    SuccessResponse:
      x-go-optional-value: true
      type: object
      properties:
        result:
          type: string
    SelectUserRequiredResponse:
      x-go-optional-value: true
      type: object
      properties:
        status:
          type: string
          example: "select_user_required"
        message:
          type: string
          example: "Select user required"
        temp_token:
          type: string
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: string
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
      required:
        - id
        - name
        - email
    Login:
      x-go-optional-value: true
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "2FA verification successful"
        users:
          type: array
          description: List of users associated with the login. Usually contains one user, but may contain multiple if same username is shared.
          items:
            $ref: "#/components/schemas/User"
        status:
          type: string
          example: success
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"
        requires2FA:
          type: boolean
          description: Whether 2FA verification is required
        loginToken:
          type: string
          description: Token for 2FA verification if required
      required:
        - status
        - message
        - user