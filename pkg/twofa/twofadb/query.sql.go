// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package twofadb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create2FAInit = `-- name: Create2FAInit :one
INSERT INTO login_2fa (login_uuid, two_factor_secret, two_factor_enabled, two_factor_type, two_factor_backup_codes)
VALUES ($1, $2, FALSE, $3, $4::TEXT[])
RETURNING uuid
`

type Create2FAInitParams struct {
	LoginUuid            uuid.UUID      `json:"login_uuid"`
	TwoFactorSecret      pgtype.Text    `json:"two_factor_secret"`
	TwoFactorType        sql.NullString `json:"two_factor_type"`
	TwoFactorBackupCodes []string       `json:"two_factor_backup_codes"`
}

// @two_factor_backup_codes TEXT[]
func (q *Queries) Create2FAInit(ctx context.Context, arg Create2FAInitParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, create2FAInit,
		arg.LoginUuid,
		arg.TwoFactorSecret,
		arg.TwoFactorType,
		arg.TwoFactorBackupCodes,
	)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const delete2FA = `-- name: Delete2FA :exec
UPDATE login_2fa
SET deleted_at = now() AT TIME ZONE 'utc'
WHERE login_uuid = $1
AND two_factor_type = $2
AND deleted_at IS NULL
`

type Delete2FAParams struct {
	LoginUuid     uuid.UUID      `json:"login_uuid"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

func (q *Queries) Delete2FA(ctx context.Context, arg Delete2FAParams) error {
	_, err := q.db.Exec(ctx, delete2FA, arg.LoginUuid, arg.TwoFactorType)
	return err
}

const disable2FA = `-- name: Disable2FA :exec
UPDATE login_2fa
SET two_factor_enabled = FALSE,
    updated_at = now() AT TIME ZONE 'utc'
WHERE login_uuid = $1
AND two_factor_type = $2
AND deleted_at IS NULL
`

type Disable2FAParams struct {
	LoginUuid     uuid.UUID      `json:"login_uuid"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

func (q *Queries) Disable2FA(ctx context.Context, arg Disable2FAParams) error {
	_, err := q.db.Exec(ctx, disable2FA, arg.LoginUuid, arg.TwoFactorType)
	return err
}

const enable2FA = `-- name: Enable2FA :exec
UPDATE login_2fa
SET two_factor_enabled = TRUE,
    updated_at = now() AT TIME ZONE 'utc'
WHERE login_uuid = $1
AND two_factor_type = $2
AND deleted_at IS NULL
`

type Enable2FAParams struct {
	LoginUuid     uuid.UUID      `json:"login_uuid"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

func (q *Queries) Enable2FA(ctx context.Context, arg Enable2FAParams) error {
	_, err := q.db.Exec(ctx, enable2FA, arg.LoginUuid, arg.TwoFactorType)
	return err
}

const get2FAByLoginUuid = `-- name: Get2FAByLoginUuid :one
SELECT uuid, login_uuid, two_factor_secret, two_factor_enabled
FROM login_2fa
WHERE login_uuid = $1
AND two_factor_type = $2
AND deleted_at IS NULL
`

type Get2FAByLoginUuidParams struct {
	LoginUuid     uuid.UUID      `json:"login_uuid"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

type Get2FAByLoginUuidRow struct {
	Uuid             uuid.UUID   `json:"uuid"`
	LoginUuid        uuid.UUID   `json:"login_uuid"`
	TwoFactorSecret  pgtype.Text `json:"two_factor_secret"`
	TwoFactorEnabled pgtype.Bool `json:"two_factor_enabled"`
}

func (q *Queries) Get2FAByLoginUuid(ctx context.Context, arg Get2FAByLoginUuidParams) (Get2FAByLoginUuidRow, error) {
	row := q.db.QueryRow(ctx, get2FAByLoginUuid, arg.LoginUuid, arg.TwoFactorType)
	var i Get2FAByLoginUuidRow
	err := row.Scan(
		&i.Uuid,
		&i.LoginUuid,
		&i.TwoFactorSecret,
		&i.TwoFactorEnabled,
	)
	return i, err
}
