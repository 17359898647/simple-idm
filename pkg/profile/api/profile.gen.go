// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// DeliveryOption defines model for DeliveryOption.
type DeliveryOption struct {
	DisplayValue string `json:"display_value,omitempty"`
	HashedValue  string `json:"hashed_value,omitempty"`
	UserID       string `json:"user_id,omitempty"`
}

// DeviceWithLogin defines model for DeviceWithLogin.
type DeviceWithLogin struct {
	// Accept headers from the device
	AcceptHeaders *string `json:"accept_headers,omitempty"`

	// When the device was first seen
	CreatedAt time.Time `json:"created_at"`

	// When the device-login link expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Unique device fingerprint
	Fingerprint string `json:"fingerprint"`

	// Last login time for this device
	LastLoginAt time.Time `json:"last_login_at"`

	// Logins linked to this device
	LinkedLogins []LoginInfo `json:"linked_logins,omitempty"`

	// Screen resolution of the device
	ScreenResolution *string `json:"screen_resolution,omitempty"`

	// Timezone of the device
	Timezone *string `json:"timezone,omitempty"`

	// User agent string of the device
	UserAgent string `json:"user_agent"`
}

// Error defines model for Error.
type Error struct {
	// Error code
	Code string `json:"code"`

	// Error message
	Message string `json:"message"`
}

// ListDevicesResponse defines model for ListDevicesResponse.
type ListDevicesResponse struct {
	Devices []DeviceWithLogin `json:"devices"`
	Message string            `json:"message"`
	Status  string            `json:"status"`
}

// Login defines model for Login.
type Login struct {
	// Token for 2FA verification if required
	LoginToken *string `json:"loginToken,omitempty"`
	Message    string  `json:"message"`

	// Whether 2FA verification is required
	Requires2fA *bool  `json:"requires2FA,omitempty"`
	Status      string `json:"status"`
	User        User   `json:"user"`

	// List of users associated with the login. Usually contains one user, but may contain multiple if same username is shared.
	Users []User `json:"users,omitempty"`
}

// LoginInfo defines model for LoginInfo.
type LoginInfo struct {
	// Login ID
	ID string `json:"id"`

	// Username associated with the login
	Username string `json:"username"`
}

// MultiUsersResponse defines model for MultiUsersResponse.
type MultiUsersResponse struct {
	Users []User `json:"users,omitempty"`
}

// PasswordPolicyResponse defines model for PasswordPolicyResponse.
type PasswordPolicyResponse struct {
	// Whether common passwords are disallowed
	DisallowCommonPwds *bool `json:"disallow_common_pwds,omitempty"`

	// Number of days until password expires
	ExpirationDays *int `json:"expiration_days,omitempty"`

	// Number of previous passwords to check against
	HistoryCheckCount *int `json:"history_check_count,omitempty"`

	// Maximum number of repeated characters allowed
	MaxRepeatedChars *int `json:"max_repeated_chars,omitempty"`

	// Minimum length of the password
	MinLength *int `json:"min_length,omitempty"`

	// Whether the password requires a digit
	RequireDigit *bool `json:"require_digit,omitempty"`

	// Whether the password requires a lowercase letter
	RequireLowercase *bool `json:"require_lowercase,omitempty"`

	// Whether the password requires a special character
	RequireSpecialChar *bool `json:"require_special_char,omitempty"`

	// Whether the password requires an uppercase letter
	RequireUppercase *bool `json:"require_uppercase,omitempty"`
}

// SelectUsersToAssociateRequiredResponse defines model for SelectUsersToAssociateRequiredResponse.
type SelectUsersToAssociateRequiredResponse struct {
	LoginID     string       `json:"login_id,omitempty"`
	Message     string       `json:"message"`
	Status      string       `json:"status"`
	UserOptions []UserOption `json:"user_options"`
}

// Structure added for integration compatibility purposes
type SingleUserResponse struct {
	User User `json:"user,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Result string `json:"result,omitempty"`
}

// TwoFactorMethod defines model for TwoFactorMethod.
type TwoFactorMethod struct {
	Enabled     bool   `json:"enabled"`
	TwoFactorID string `json:"two_factor_id,omitempty"`
	Type        string `json:"type"`
}

// TwoFactorMethodSelection defines model for TwoFactorMethodSelection.
type TwoFactorMethodSelection struct {
	DeliveryOptions []DeliveryOption `json:"delivery_options,omitempty"`
	Type            string           `json:"type,omitempty"`
}

// TwoFactorMethods defines model for TwoFactorMethods.
type TwoFactorMethods struct {
	Count   int               `json:"count"`
	Methods []TwoFactorMethod `json:"methods"`
}

// TwoFactorRequiredResponse defines model for TwoFactorRequiredResponse.
type TwoFactorRequiredResponse struct {
	Message string `json:"message,omitempty"`
	Status  string `json:"status,omitempty"`

	// Temporary token to use for 2FA verification
	TempToken        string                     `json:"temp_token,omitempty"`
	TwoFactorMethods []TwoFactorMethodSelection `json:"two_factor_methods,omitempty"`
}

// User defines model for User.
type User struct {
	Email string `json:"email"`
	ID    string `json:"id"`
	Name  string `json:"name"`
	Role  string `json:"role"`
}

// UserOption defines model for UserOption.
type UserOption struct {
	// fullname of the user
	DisplayName string `json:"display_name,omitempty"`
	Email       string `json:"email,omitempty"`

	// ID of the user
	UserID string `json:"user_id,omitempty"`
}

// Delete2faJSONBody defines parameters for Delete2fa.
type Delete2faJSONBody struct {
	TwofaID   *string                    `json:"twofa_id,omitempty"`
	TwofaType Delete2faJSONBodyTwofaType `json:"twofa_type"`
}

// Delete2faJSONBodyTwofaType defines parameters for Delete2fa.
type Delete2faJSONBodyTwofaType string

// Post2faDisableJSONBody defines parameters for Post2faDisable.
type Post2faDisableJSONBody struct {
	TwofaType Post2faDisableJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faDisableJSONBodyTwofaType defines parameters for Post2faDisable.
type Post2faDisableJSONBodyTwofaType string

// Post2faEnableJSONBody defines parameters for Post2faEnable.
type Post2faEnableJSONBody struct {
	TwofaType Post2faEnableJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faEnableJSONBodyTwofaType defines parameters for Post2faEnable.
type Post2faEnableJSONBodyTwofaType string

// Post2faSetupJSONBody defines parameters for Post2faSetup.
type Post2faSetupJSONBody struct {
	TwofaType Post2faSetupJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faSetupJSONBodyTwofaType defines parameters for Post2faSetup.
type Post2faSetupJSONBodyTwofaType string

// ChangePasswordJSONBody defines parameters for ChangePassword.
type ChangePasswordJSONBody struct {
	// User's current password
	CurrentPassword string `json:"current_password"`

	// User's new password
	NewPassword string `json:"new_password"`
}

// PostUserSwitchJSONBody defines parameters for PostUserSwitch.
type PostUserSwitchJSONBody struct {
	// ID of the user to switch to
	UserID string `json:"user_id"`
}

// ChangeUsernameJSONBody defines parameters for ChangeUsername.
type ChangeUsernameJSONBody struct {
	// login id of the credential to be updated
	LoginID string `json:"login_id"`

	// New username to set
	NewUsername string `json:"new_username"`
}

// AssociateUserJSONBody defines parameters for AssociateUser.
type AssociateUserJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CompleteAssociateUserJSONBody defines parameters for CompleteAssociateUser.
type CompleteAssociateUserJSONBody struct {
	// Optional login ID to associate with. If not provided, the current login will be used.
	LoginID       string       `json:"login_id,omitempty"`
	SelectedUsers []UserOption `json:"selected_users"`
}

// Delete2faJSONRequestBody defines body for Delete2fa for application/json ContentType.
type Delete2faJSONRequestBody Delete2faJSONBody

// Bind implements render.Binder.
func (Delete2faJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faDisableJSONRequestBody defines body for Post2faDisable for application/json ContentType.
type Post2faDisableJSONRequestBody Post2faDisableJSONBody

// Bind implements render.Binder.
func (Post2faDisableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faEnableJSONRequestBody defines body for Post2faEnable for application/json ContentType.
type Post2faEnableJSONRequestBody Post2faEnableJSONBody

// Bind implements render.Binder.
func (Post2faEnableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faSetupJSONRequestBody defines body for Post2faSetup for application/json ContentType.
type Post2faSetupJSONRequestBody Post2faSetupJSONBody

// Bind implements render.Binder.
func (Post2faSetupJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody ChangePasswordJSONBody

// Bind implements render.Binder.
func (ChangePasswordJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostUserSwitchJSONRequestBody defines body for PostUserSwitch for application/json ContentType.
type PostUserSwitchJSONRequestBody PostUserSwitchJSONBody

// Bind implements render.Binder.
func (PostUserSwitchJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// ChangeUsernameJSONRequestBody defines body for ChangeUsername for application/json ContentType.
type ChangeUsernameJSONRequestBody ChangeUsernameJSONBody

// Bind implements render.Binder.
func (ChangeUsernameJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// AssociateUserJSONRequestBody defines body for AssociateUser for application/json ContentType.
type AssociateUserJSONRequestBody AssociateUserJSONBody

// Bind implements render.Binder.
func (AssociateUserJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// CompleteAssociateUserJSONRequestBody defines body for CompleteAssociateUser for application/json ContentType.
type CompleteAssociateUserJSONRequestBody CompleteAssociateUserJSONBody

// Bind implements render.Binder.
func (CompleteAssociateUserJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// Get2faMethodsJSON200Response is a constructor method for a Get2faMethods response.
// A *Response is returned with the configured status code and content type from the spec.
func Get2faMethodsJSON200Response(body TwoFactorMethods) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Get2faMethodsJSON404Response is a constructor method for a Get2faMethods response.
// A *Response is returned with the configured status code and content type from the spec.
func Get2faMethodsJSON404Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// Delete2faJSON200Response is a constructor method for a Delete2fa response.
// A *Response is returned with the configured status code and content type from the spec.
func Delete2faJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faDisableJSON200Response is a constructor method for a Post2faDisable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faDisableJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faEnableJSON200Response is a constructor method for a Post2faEnable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faEnableJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faSetupJSON201Response is a constructor method for a Post2faSetup response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faSetupJSON201Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// GetMyDevicesJSON200Response is a constructor method for a GetMyDevices response.
// A *Response is returned with the configured status code and content type from the spec.
func GetMyDevicesJSON200Response(body ListDevicesResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetMyDevicesJSON401Response is a constructor method for a GetMyDevices response.
// A *Response is returned with the configured status code and content type from the spec.
func GetMyDevicesJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetMyDevicesJSON500Response is a constructor method for a GetMyDevices response.
// A *Response is returned with the configured status code and content type from the spec.
func GetMyDevicesJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// ChangePasswordJSON400Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// ChangePasswordJSON401Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ChangePasswordJSON403Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON403Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// ChangePasswordJSON500Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GetPasswordPolicyJSON200Response is a constructor method for a GetPasswordPolicy response.
// A *Response is returned with the configured status code and content type from the spec.
func GetPasswordPolicyJSON200Response(body PasswordPolicyResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON200Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON400Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON400Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON403Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON403Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON400Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON401Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON403Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON403Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON409Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON409Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        409,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON500Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// FindUsersWithLoginJSON200Response is a constructor method for a FindUsersWithLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func FindUsersWithLoginJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// AssociateUserJSON202Response is a constructor method for a AssociateUser response.
// A *Response is returned with the configured status code and content type from the spec.
func AssociateUserJSON202Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        202,
		contentType: "application/json",
	}
}

// CompleteAssociateUserJSON200Response is a constructor method for a CompleteAssociateUser response.
// A *Response is returned with the configured status code and content type from the spec.
func CompleteAssociateUserJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get login 2FA methods
	// (GET /2fa)
	Get2faMethods(w http.ResponseWriter, r *http.Request) *Response
	// Delete a 2FA method
	// (POST /2fa/delete)
	Delete2fa(w http.ResponseWriter, r *http.Request) *Response
	// Disable an existing 2FA method
	// (POST /2fa/disable)
	Post2faDisable(w http.ResponseWriter, r *http.Request) *Response
	// Enable an existing 2FA method
	// (POST /2fa/enable)
	Post2faEnable(w http.ResponseWriter, r *http.Request) *Response
	// Create a new 2FA method
	// (POST /2fa/setup)
	Post2faSetup(w http.ResponseWriter, r *http.Request) *Response
	// Get devices linked to the authenticated user's login
	// (GET /devices)
	GetMyDevices(w http.ResponseWriter, r *http.Request) *Response
	// Change user password
	// (PUT /password)
	ChangePassword(w http.ResponseWriter, r *http.Request) *Response
	// Get password policy
	// (GET /password/policy)
	GetPasswordPolicy(w http.ResponseWriter, r *http.Request) *Response
	// Switch to a different user when multiple users are available for the same login
	// (POST /user/switch)
	PostUserSwitch(w http.ResponseWriter, r *http.Request) *Response
	// Change username
	// (PUT /username)
	ChangeUsername(w http.ResponseWriter, r *http.Request) *Response
	// Get a list of users associated with the current login
	// (GET /users)
	FindUsersWithLogin(w http.ResponseWriter, r *http.Request) *Response
	// Associate a user to the current login
	// (POST /users/associate)
	AssociateUser(w http.ResponseWriter, r *http.Request) *Response
	// Complete user association after user selection
	// (POST /users/associate/complete)
	CompleteAssociateUser(w http.ResponseWriter, r *http.Request) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Get2faMethods operation middleware
func (siw *ServerInterfaceWrapper) Get2faMethods(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Get2faMethods(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Delete2fa operation middleware
func (siw *ServerInterfaceWrapper) Delete2fa(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Delete2fa(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faDisable operation middleware
func (siw *ServerInterfaceWrapper) Post2faDisable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faDisable(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faEnable operation middleware
func (siw *ServerInterfaceWrapper) Post2faEnable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faEnable(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faSetup operation middleware
func (siw *ServerInterfaceWrapper) Post2faSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faSetup(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetMyDevices operation middleware
func (siw *ServerInterfaceWrapper) GetMyDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetMyDevices(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ChangePassword(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetPasswordPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetPasswordPolicy(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostUserSwitch operation middleware
func (siw *ServerInterfaceWrapper) PostUserSwitch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostUserSwitch(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ChangeUsername operation middleware
func (siw *ServerInterfaceWrapper) ChangeUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ChangeUsername(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// FindUsersWithLogin operation middleware
func (siw *ServerInterfaceWrapper) FindUsersWithLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.FindUsersWithLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// AssociateUser operation middleware
func (siw *ServerInterfaceWrapper) AssociateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.AssociateUser(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CompleteAssociateUser operation middleware
func (siw *ServerInterfaceWrapper) CompleteAssociateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CompleteAssociateUser(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/2fa", wrapper.Get2faMethods)
		r.Post("/2fa/delete", wrapper.Delete2fa)
		r.Post("/2fa/disable", wrapper.Post2faDisable)
		r.Post("/2fa/enable", wrapper.Post2faEnable)
		r.Post("/2fa/setup", wrapper.Post2faSetup)
		r.Get("/devices", wrapper.GetMyDevices)
		r.Put("/password", wrapper.ChangePassword)
		r.Get("/password/policy", wrapper.GetPasswordPolicy)
		r.Post("/user/switch", wrapper.PostUserSwitch)
		r.Put("/username", wrapper.ChangeUsername)
		r.Get("/users", wrapper.FindUsersWithLogin)
		r.Post("/users/associate", wrapper.AssociateUser)
		r.Post("/users/associate/complete", wrapper.CompleteAssociateUser)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
