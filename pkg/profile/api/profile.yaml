openapi: 3.0.0
info:
  title: Profile Management API
  version: 1.0.0
paths:
  /username:
    put:
      summary: Change username
      operationId: ChangeUsername
      description: Update the user's username after verifying their password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: User's current password for verification
                new_username:
                  type: string
                  description: New username to set
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_-]+$'
              required:
                - new_username
      responses:
        "200":
          description: Username updated successfully
        "400":
          description: Invalid request (e.g., invalid username format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (not logged in)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (invalid password)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (username already taken)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /password:
    put:
      summary: Change user password
      operationId: ChangePassword
      description: Update the user's password after verifying their current password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: User's current password
                new_password:
                  type: string
                  description: User's new password
              required:
                - current_password
                - new_password
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Invalid request (e.g., invalid current password)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (not logged in)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (invalid current password)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /password/policy:
    get:
      summary: Get password policy
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordPolicyResponse"
  /2fa:
    get:
      operationId: get_2fa_methods
      summary: Get login 2FA methods
      responses:
        "200":
          description: 2FA method found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwoFactorMethods"
        "404":
          description: Login 2fa methods not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login 2fa methods not found"
  /2fa/setup:
    post:
      summary: Create a new 2FA method
      operationId: post_2fa_setup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                twofa_type:
                  type: string
                  enum: ["email", "sms", "authenticator_app"]
              required:
                - twofa_type
      responses:
        "201":
          description: 2FA method created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Invalid request parameters
        "409":
          description: 2FA method already exists
        "500":
          description: Internal server error
  /2fa/enable:
    post:
      summary: Enable an existing 2FA method
      operationId: post_2fa_enable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                twofa_type:
                  type: string
                  enum: ["email", "sms", "authenticator_app"]
              required:
                - twofa_type
      responses:
        "200":
          description: 2FA method enabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Invalid request parameters
        "404":
          description: 2FA method not found
        "500":
          description: Internal server error
  /2fa/disable:
    post:
      summary: Disable an existing 2FA method
      operationId: post_2fa_disable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                twofa_type:
                  type: string
                  enum: ["email", "sms", "authenticator_app"]
              required:
                - twofa_type
      responses:
        "200":
          description: 2FA method disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Invalid request parameters
        "404":
          description: 2FA method not found
        "500":
          description: Internal server error
  /2fa/delete:
    post:
      summary: Delete a 2FA method
      operationId: delete_2fa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                twofa_id:
                  type: string
                  format: uuid
                twofa_type:
                  type: string
                  enum: ["email", "sms", "authenticator_app"]
              required:
                - twofa_type
      responses:
        "200":
          description: 2FA method deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Invalid request parameters
        "404":
          description: 2FA method not found
        "500":
          description: Internal server error
  /user/switch:
    post:
      summary: Switch to a different user when multiple users are available for the same login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ID of the user to switch to
              required:
                - user_id
      responses:
        "200":
          description: Successfully switched to the specified user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Login"
                  - $ref: "#/components/schemas/SingleUserResponse"
        "400":
          description: Invalid request or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid user UUID or user not found"
        "403":
          description: Not authorized to switch to this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not authorized to switch to this user"
  /users:
    get:
      summary: Get a list of users associated with the current login
      operationId: find_users_with_login
      responses:
        "200":
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/MultiUsersResponse"
                  - $ref: "#/components/schemas/SingleUserResponse"
  /users/associate:
    post:
      summary: Associate a user to the current login
      operationId: associate_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                username:
                  type: string
              required:
                - password
                - username
      responses:
        "202":
          description: further action required (2FA or login selection)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/SelectUsersToAssociateRequiredResponse"
                  - $ref: "#/components/schemas/TwoFactorRequiredResponse"
        "400":
          description: Invalid request parameters
        "404":
          description: Login not found
  /users/associate/complete:
    post:
      summary: Complete user association after user selection
      operationId: complete_associate_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              x-go-optional-value: true
              required:
                - selected_users
              properties:
                login_id:
                  type: string
                  description: Optional login ID to associate with. If not provided, the current login will be used.
                selected_users:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserOption'
      responses:
        "200":
          description: User association completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
components:
  schemas:
    UserOption:
      x-go-optional-value: true
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: ID of the user
        display_name:
          type: string
          description: fullname of the user
        email:
          type: string
          
    SuccessResponse:
      x-go-optional-value: true
      type: object
      properties:
        result:
          type: string
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
      required:
        - code
        - message
    TwoFactorSetup:
      type: object
      properties:
        secret:
          type: string
          description: TOTP secret key
        qrCode:
          type: string
          description: Data URI of QR code image
        otpauthUrl:
          type: string
          description: otpauth:// URL for manual setup
    TwoFactorEnable:
      type: object
      required:
        - code
        - secret
      properties:
        code:
          type: string
          description: Current TOTP code
        secret:
          type: string
          description: TOTP secret from setup
    TwoFactorDisable:
      type: object
      required:
        - code
        - currentPassword
      properties:
        code:
          type: string
          description: Current TOTP code
        currentPassword:
          type: string
          description: Current account password
    PasswordPolicyResponse:
      type: object
      properties:
        min_length:
          type: integer
          description: Minimum length of the password
        require_uppercase:
          type: boolean
          description: Whether the password requires an uppercase letter
        require_lowercase:
          type: boolean
          description: Whether the password requires a lowercase letter
        require_digit:
          type: boolean
          description: Whether the password requires a digit
        require_special_char:
          type: boolean
          description: Whether the password requires a special character
        disallow_common_pwds:
          type: boolean
          description: Whether common passwords are disallowed
        max_repeated_chars:
          type: integer
          description: Maximum number of repeated characters allowed
        history_check_count:
          type: integer
          description: Number of previous passwords to check against
        expiration_days:
          type: integer
          description: Number of days until password expires
    TwoFactorMethods:
      type: object
      properties:
        methods:
          type: array
          items:
            $ref: "#/components/schemas/TwoFactorMethod"
        count:
          type: integer
      required:
        - methods
        - count
    TwoFactorMethod:
      x-go-optional-value: true
      type: object
      properties:
        two_factor_id:
          type: string
          format: uuid
        type:
          type: string
        enabled:
          type: boolean
      required:
        - type
        - enabled
    SingleUserResponse:
      description: Structure added for integration compatibility purposes
      x-go-optional-value: true
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
    Login:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Login successful"
        users:
          type: array
          description: List of users associated with the login. Usually contains one user, but may contain multiple if same username is shared.
          items:
            $ref: "#/components/schemas/User"
        user:
          $ref: "#/components/schemas/User"
        requires2FA:
          type: boolean
          description: Whether 2FA verification is required
        loginToken:
          type: string
          description: Token for 2FA verification if required
      required:
        - status
        - message
        - user
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
      required:
        - id
        - name
        - email
        - role
    MultiUsersResponse:
      x-go-optional-value: true
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
    SelectUsersToAssociateRequiredResponse:
      type: object
      x-go-optional-value: true
      properties:
        login_id:
          type: string
          format: uuid
        user_options:
          type: array
          items:
            $ref: '#/components/schemas/UserOption'
        status:
          type: string
          example: "user_selection_required"
        message:
          type: string
      required:
        - user_options
        - status
        - message
    TwoFactorRequiredResponse:
      x-go-optional-value: true
      type: object
      properties:
        status:
          type: string
          example: "2fa_required"
        message:
          type: string
          example: "2FA verification required"
        temp_token:
          type: string
          description: Temporary token to use for 2FA verification
        two_factor_methods:
          type: array
          items:
            $ref: "#/components/schemas/TwoFactorMethodSelection"
    TwoFactorMethodSelection:
      x-go-optional-value: true
      type: object
      properties:
        type:
          type: string
        delivery_options:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryOption"
    DeliveryOption:
      x-go-optional-value: true
      type: object
      properties:
        hashed_value:
          type: string
        display_value:
          type: string
        user_id:
          type: string
          format: uuid
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT