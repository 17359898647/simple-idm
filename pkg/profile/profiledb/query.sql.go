// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package profiledb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUserByUUID = `-- name: GetUserByUUID :one

SELECT uuid, username, email, password, created_at, last_modified_at
FROM users
WHERE uuid = $1
`

type GetUserByUUIDRow struct {
	Uuid           uuid.UUID      `json:"uuid"`
	Username       sql.NullString `json:"username"`
	Email          string         `json:"email"`
	Password       []byte         `json:"password"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
}

// Verify current password
func (q *Queries) GetUserByUUID(ctx context.Context, argUuid uuid.UUID) (GetUserByUUIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByUUID, argUuid)
	var i GetUserByUUIDRow
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password = $2,
    last_modified_at = NOW()
WHERE uuid = $1
`

type UpdateUserPasswordParams struct {
	Uuid     uuid.UUID `json:"uuid"`
	Password []byte    `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Uuid, arg.Password)
	return err
}
